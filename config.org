#+TITLE: Emacs config
#+EMAIL: giulio.pietroiusti@gmail.com
#+LANGUAGE: en

* General Settings
** Me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Giulio Pietroiusti"
        user-mail-address "giulio.pietroiusti@gmail.com")
#+END_SRC

** Encoding
#+BEGIN_SRC emacs-lisp
  ;; set default file encoding
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

** Disable backup and auto-save
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

** Delete Selection Mode
#+BEGIN_SRC emacs-lisp
  ;; If you enable Delete Selection mode, a minor mode, then inserting
  ;; text while the mark is active causes the selected text to be
  ;; deleted first. This also deactivates the mark.
  (delete-selection-mode 1)
#+END_SRC

** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
  ;; show matching parenthesis
  (show-paren-mode 1)
#+END_SRC

** ibuffer instead of buffer Menu
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-projectile
    :ensure t
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-projectile-set-filter-groups)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC

** Tabs
#+BEGIN_SRC emacs-lisp
;; set tab to 4 spaces
(setq tab-width 4) ; or any other preferred value
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+END_SRC

** Auto-fill
#+BEGIN_SRC emacs-lisp
  ;; enable auto-fill-mode when in text-mode and org-mode
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Use y/n instead of yes/no
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Beep
#+BEGIN_SRC emacs-lisp
  ;; get visual indication
  (setq visible-bell 1)
#+END_SRC

** Common lisp functions and macros
#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC

** String manipulation functions
#+BEGIN_SRC emacs-lisp
  (use-package s
    :ensure t)
#+END_SRC
** bookmarks
Save bookmarks every time a bookmark is made or deleted.
#+begin_src emacs-lisp
(setq bookmark-save-flag 1)
#+end_src
* Appearances
** wm
Remove black border at the bottom in certain window managers
#+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Inconsolata-12"))
#+END_SRC
** Bars
#+BEGIN_SRC emacs-lisp
  ;; Don't show tool bar
  (tool-bar-mode 0)
  ;; Don't show menu bar
  (menu-bar-mode 0)
  ;; Don't show scroll bar
  (scroll-bar-mode 0)
#+END_SRC
** Themes
*** solarized-emacs
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)

    ;; (load-theme 'solarized-light t)
    ;; (load-theme 'solarized-dark t)
    )
#+END_SRC
*** color-theme-sanityinc-tomorrow
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)

  (load-theme 'sanityinc-tomorrow-bright t)
    #+END_SRC

** Current line highlighting
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

** Scroll one line at a time
#+BEGIN_SRC emacs-lisp
  ;; scroll one line at a time

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (setq scroll-step 1 ;; keyboard scroll one line at a time
          scroll-conservatively  10000)
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(85 . 75))
  ;; (add-to-list 'default-frame-alist '(alpha . (85 . 75)))

  ;; (defun toggle-transparency ()
  ;;   (interactive)
  ;;   (let ((alpha (frame-parameter nil 'alpha)))
  ;;     (set-frame-parameter
  ;;      nil 'alpha
  ;;      (if (eql (cond ((numberp alpha) alpha)
  ;;                     ((numberp (cdr alpha)) (cdr alpha))
  ;;                     ;; Also handle undocumented (<active> <inactive>) form.
  ;;                     ((numberp (cadr alpha)) (cadr alpha)))
  ;;               100)
  ;;          '(85 . 75) '(100 . 100)))))
  ;; (global-set-key (kbd "C-c x") 'toggle-transparency)
#+END_SRC

** olivetti-mode
Best package for minimal reading/writing.
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :pin melpa)
#+END_SRC

* Indispensable
** org
#+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :pin gnu
      :config
      (setq org-startup-indented t)
      (setq org-indent-mode t)
      (setq org-hide-leading-stars t)
      (setq org-src-fontify-natively t)
      ;; The four Org commands org-store-link, org-capture, org-agenda, and
      ;; org-iswitchb should be accessible through global keys (i.e.,
      ;; anywhere in Emacs, not just in Org buffers).
      (global-set-key "\C-cl" 'org-store-link)
      (global-set-key "\C-cc" 'org-capture)
      (global-set-key "\C-ca" 'org-agenda)

      ;; activate special behavior or C-a, C-e, and C-k
      (setq org-special-ctrl-a/e t)
      (setq org-special-ctrl-k t)
      (setq org-ctrl-k-protect-subtree t)

      ;; org capture
      (setq org-capture-templates
            '(
              ("t" "add task" entry
               (file "~/Nextcloud/org/todo.org")
               "* TODO %?" :prepend t)

              ("n" "notes" entry
               (file "~/Nextcloud/org/notes.org")
               "* %?" :prepend t)

              ("r" "readings" entry
               (file "~/Nextcloud/org/readings.org")
               "* %?" :prepend t)

              ("a" "activities" entry
               (file "~/Nextcloud/org/activities.org")
               "* %?")

              ("m" "meetings")
              ("md" "Dan" entry
               (file "~/Nextcloud/org/meetings.org")
               "* Dan \n SCHEDULED: %^t%?")
              ("mt" "Teresa" entry
               (file "~/Nextcloud/org/meetings.org")
               "* Teresa \n SCHEDULED: %^t%?")
              ("mo" "Other" entry
               (file "~/Nextcloud/org/meetings.org")
               "* %?")))

      ;; Define todo states
      (setq org-todo-keywords
            '((sequence "TODO" "IN PROGRESS" "DONE" )))

      ;; add timestamp to item when marked as DONE
      (setq org-log-done 'time)

      (setq org-agenda-files
            '("~/Nextcloud/org/activities.org" "~/Nextcloud/org/todo.org"
              "~/Nextcloud/org/meetings.org" "~/Nextcloud/org/notes.org"
              "~/Nextcloud/org/readings.org" "~/Nextcloud/org/teaching.org"
              "~/Nextcloud/org/habits.org"))

      ;; enable habits
      (require 'org-habit)
      (add-to-list 'org-modules "org-habit"))
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-disable-insert-state-bindings t)
    :config
    (evil-mode 1)

    (setq evil-default-state 'emacs
          evil-insert-state-modes nil
          evil-motion-state-modes nil)


    ;; solve blinking problem with pdf-tools
    (evil-set-initial-state 'pdf-view-mode 'emacs)
    (add-hook 'pdf-view-mode-hook
              (lambda ()
                (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))

    ;; Change cursor color in different modes
    ;; https://github.com/bling/dotemacs/blob/master/config/init-evil.el (setq evil-emacs-state-cursor '("grey" box))
    (setq evil-emacs-state-cursor '("#839496" box))
    (setq evil-motion-state-cursor '("#e80000" box))
    (setq evil-normal-state-cursor '("#e80000" box))
    (setq evil-visual-state-cursor '("#e80000" box))
    (setq evil-insert-state-cursor '("#e80000" bar))
    (setq evil-replace-state-cursor '("#e80000" bar))
    (setq evil-operator-state-cursor '("#e80000" hollow))
    ;; TODO: change color of cursor when it is in the minibuffer
    )
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :pin melpa
    :config
    (pdf-tools-install)

    (define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
    (define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)
    (define-key pdf-view-mode-map (kbd "l") 'image-forward-hscroll)
    (define-key pdf-view-mode-map (kbd "h") 'image-backward-hscroll)
    (define-key pdf-view-mode-map (kbd "K") 'image-kill-buffer))


  ;; :bind (:map pdf-view-mode-map
  ;;                 ("j"   . pdf-view-next-line-or-next-page)
  ;;                 ("k"   . pdf-view-previous-line-or-previous-page)
  ;;                 ("l"   . image-forward-hscroll)
  ;;                 ("h"   . image-backward-hscroll)
  ;;                 ("K"   . image-kill-buffer)))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** AUCTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    :config
    ;; from the manual: If you want to make AUCTeX aware of style files and multi-file
    ;; documents right away, insert the following in your '.emacs' file. 
    (setq TeX-auto-save t)
    (setq Tex-parse-self t)
    (setq-default TeX-master nil))
#+END_SRC
** ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :ensure t
    :config
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :config
    (require 'ido-completing-read+)
    (setq ido-ubiquitous-mode 1))
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
  ;; (use-package counsel
  ;;   :ensure t
  ;;   :config
  ;;   (ivy-mode 1)
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq ivy-count-format "(%d/%d) ")
  ;;   (setq enable-recursive-minibuffers t))
#+END_SRC

* Other
** shell
Open shell in current window.
#+BEGIN_SRC emacs-lisp
  (defun shell-same-window-advice (orig-fn &optional buffer)
    "Advice to make `shell' reuse the current window.

    Intended as :around advice."
    (let* ((buffer-regexp
            (regexp-quote
             (cond ((bufferp buffer)  (buffer-name buffer))
                   ((stringp buffer)  buffer)
                   (:else             "*shell*"))))
           (display-buffer-alist
            (cons `(,buffer-regexp display-buffer-same-window)
                  display-buffer-alist)))
      (funcall orig-fn buffer)))

  (advice-add 'shell :around #'shell-same-window-advice)
#+END_SRC
** change-inner
#+BEGIN_SRC emacs-lisp
  ;; (use-package change-inner
  ;; :ensure t
  ;; :config
  ;; (global-set-key (kbd "C-c i") 'change-inner)
  ;; (global-set-key (kbd "C-c o") 'change-outer))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t)
#+END_SRC

** dired
*** general
#+BEGIN_SRC emacs-lisp
  ; don't show all the details
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
*** dired-narrow
#+BEGIN_SRC emacs-lisp
    (use-package dired-narrow
      :ensure t
      :config
      (bind-keys :map dired-mode-map
                 ("M-n" . dired-narrow)))
#+END_SRC
*** dired-subtree
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :ensure t
    :config
    (bind-keys :map dired-mode-map
               ("TAB" . dired-subtree-insert)
               ("<S-iso-lefttab>" . dired-subtree-remove)
               ("DEL" . dired-subtree-remove)))
#+END_SRC


** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'smex))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-;") 'avy-goto-line))
    (global-set-key (kbd "C-:") 'avy-goto-char)
#+END_SRC

** impatient-mode
#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
    :ensure t)
#+END_SRC

** restclient-mode
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC

** engine-mode
#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t)
    (defengine oxforddictionaries
      "https://en.oxforddictionaries.com/definition/%s/"
      :keybinding "o")
    
    (defengine google-translate
      "https://translate.google.com/#en/it/%s/"
      :keybinding "t")

    (defengine treccanivocabolario
      "http://www.treccani.it/vocabolario/ricerca/%s/"
      :keybinding "i"))
#+END_SRC
** only frame
I use this package with tiling wms that are not EXWM.
#+BEGIN_SRC emacs-lisp
  ;; (use-package frames-only-mode
  ;;   :ensure t
  ;;   :config
  ;;   (frames-only-mode))
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
      :ensure t
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC


** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (global-set-key (kbd "C-c o") 'switch-window))
#+END_SRC

** buffer-move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)
#+END_SRC
** elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    (global-set-key (kbd "C-x w") 'elfeed)
    (setq elfeed-feeds
        '(("https://www.stallman.org/rss/rss.xml" stallman)
          ("https://planet.emacslife.com/atom.xml" emacs)
          ("https://lukesmith.xyz/rss.xml" computing)
          ("https://protesilaos.com/codelog.xml" computing emacs)
          ("https://listserv.liv.ac.uk/cgi-bin/wa?RSS&L=PHILOS-L&v=2.0" philos-l))))
#+end_src
* Languages configuration
** Elisp configuration
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)

  (use-package rainbow-delimiters
    :ensure t)

  ;; Enable paredit, rainbow-delimiters and show-paren-mode for Emacs lisp
  ;; mode (mode to edit Emacs files *.el) and lisp-interaction-mode (mode
  ;; to edit *scratch* buffer)

  ;; not using it for the moment

  
  ;; (add-hook 'emacs-lisp-mode-hook
  ;;           (lambda ()
  ;;             (paredit-mode t)
  ;;             (rainbow-delimiters-mode t)
  ;;             (show-paren-mode 1)
  ;;             ))
  ;; (add-hook 'lisp-interaction-mode
  ;;           (lambda ()
  ;;             (paredit-mode t)
  ;;             (rainbow-delimiters-mode t)
  ;;             (show-paren-mode 1)
  ;;             ))
#+END_SRC

** C configuration
#+BEGIN_SRC emacs-lisp
  (setq-default c-default-style "linux"
                c-basic-offset 4)
#+END_SRC

** js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (setq js2-basic-offset 2)
    ;; js2-mode as a defalut for js files
    (add-to-list 'auto-mode-alist `(,(rx ".js" string-end) . js2-mode)))
#+END_SRC
** pug-mode
#+BEGIN_SRC emacs-lisp
  (use-package pug-mode
    :ensure t)
#+END_SRC
* EXWM
I keep a separate file that is loaded only when Emacs works as X WM.

In my .xinitrc I have something like:
exec dbus-launch --exit-with-session emacs -l ~/.emacs.d/exwm.el
